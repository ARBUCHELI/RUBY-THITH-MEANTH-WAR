** THITH MEANTH WAR!
--------------------
* What You'll Be Building
-------------------------
	Now that we can direct our program using if / else statements, we can produce different results based on different user input.


	In this project, we’ll combine control flow with a few new Ruby string methods to Daffy Duckify a user’s string, replacing each "s" with "th".

===================================================================================================================================================================

* Getting User Input
--------------------
	First, we should print a statement to prompt the user for input, then set that input to a variable using gets.chomp.

===================================================================================================================================================================

* Downcase!
	We want to make sure we capture both "S" and "s" in the user’s input. We could write separate if / else statements to handle this, but we can also use .downcase! to convert the 
	user’s input to all lower case. That way, we only have to search for "s".

===================================================================================================================================================================

* Setting Up the 'If' Branch, Part 1
------------------------------------
	All right! Time to add in a little control flow.

	For the if half of our branch, we want to check whether the user’s input contains an "s".

		if string_to_check.include? "substring"

	We can do that using Ruby’s .include? method, which evaluates to true if it finds what it’s looking for and false otherwise.

	(As a general rule, Ruby methods that end with ? evaluate to the boolean values true or false.)

===================================================================================================================================================================

























